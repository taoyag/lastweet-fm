<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee          http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <!-- Faces Servlet -->
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!-- Faces Servlet Mapping -->
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </servlet-mapping>
    <!-- explicitly setting the EL factory, otherwise is not working correctly under tomcat and jetty    -->
    <context-param>
        <param-name>com.sun.faces.expressionFactory</param-name>
        <param-value>com.sun.el.ExpressionFactoryImpl</param-value>
    </context-param>
    <context-param>
        <param-name>com.sun.faces.enableThreading</param-name>
        <param-value>false</param-value>
    </context-param>
    
    <!-- welcome file mapping -->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <!--
                - Location of the XML file that defines the root application context.
                - Applied by ContextLoaderServlet.
                -
                - Can include "/WEB-INF/dataAccessContext-local.xml" for a single-database
                - context, or "/WEB-INF/dataAccessContext-jta.xml" for a two-database context.
        -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            /WEB-INF/applicationContext.xml,
            /WEB-INF/applicationContext-security.xml
        </param-value>        
    </context-param>
    <!--
                - Loads the root application context of this web app at startup,
                - by default from "/WEB-INF/applicationContext.xml".
                - Note that you need to fall back to Spring's ContextLoaderServlet for
                - J2EE servers that do not follow the Servlet 2.4 initialization order.
                -
                - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
                - to access it anywhere in the web application, outside of the framework.
                -
                - The root context is the parent of all servlet-specific contexts.
                - This means that its beans are automatically available in these child contexts,
                - both for getBean(name) calls and (external) bean references.
     -->   
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>   

    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>crud.gae-jsf2-spring3.root</param-value>
    </context-param>

  
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/classes/log4j.properties</param-value>
    </context-param>

   <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
</web-app>
